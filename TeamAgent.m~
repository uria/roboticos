% t: time step
% T1: team inforamtion
% S1: partial state of player 1, or full team state
% S2--S5: partial states of players 2--5

function A=TeamAgent(t,T1,S1,S2,S3,S4,S5)

    global Var theta e numActions numBinFeatures numPlayers lambda gamma epsilon alpha Q a; % define your variables of data_structures as globals to access them

    if(nargin==3)   % full observability scenario
        S=S1;
        
        F = zeros(numPlayers,numBinFeatures);
        
        
        if t == 1
            e = zeros(numPlayers,numBinFeatures*numActions);
            
            %Sarsa initialization of the episode
            for i = 1:numPlayers
                F(i,:) = get_features_for_player(i,S);
                index = find(F(i,:) == 1);
                Q(i,:) = arrayfun(@(action) sum(theta(index + (action-1)*numBinFeatures),2), 1:numActions);
                
                [nonUsed a(i)] = max(Q(i,:),[],2);            
                a(i) = eSoft(a(i));
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                indexFa = find(F(i,:) == 1) + (a(i)-1)*numBinFeatures;
                e(i,indexFa) = e(i,indexFa)+1;
                                
                
                if numel(find(theta))
            end            
        else
            sigma = reward(S) - Q(:,a);
            for i = 1:numPlayers
                F(i,:) = get_features_for_player(i,S);
                index = find(F(i,:) == 1);
                Q(i,:) = arrayfun(@(action) sum(theta(index + (action-1)*numBinFeatures),2), 1:numActions);
                
                [nonUsed a(i)] = max(Q(i,:),[],2);
                a(i) = eSoft(a(i));            

                sigma(i) = sigma(i) + gamma*Q(i,a(i));                
                theta = theta + alpha*sigma(i)*e(i,:);
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                e(i,:) = gamma*lambda*e(i,:);
                indexFa = find(F(i,:) == 1) + (a(i)-1)*numBinFeatures;
                e(i,indexFa) = e(i,indexFa)+1;
            end            
        end

        A=mapActions(a,S);
    elseif(nargin==7)    % partial observability scenario
        % takes in partial states, S1 to S5, and generates a vector of actions,
        % A.mex
        % Each partial state is a cell array of objects. To access individual
        % properties of, e.g, the 4th object of S2, use: S2{4}.X

        
       A={'dash 10','dash 5','dash 0','dash 0','dash 0'};
    end
end

%--------------------------------------------------------------
function [microActions] = mapActions(a,S)
    global numPlayers;
    microActions = cell(1,numPlayers);
    for i = 1:numPlayers
        switch a(i)
            case 1
                microActions{i} = goToBall(i,S);
            case 2
                microActions{i} = kickBallGoal(i,S);
            case 3
                microActions{i} = goNearTheBall(i,S);
            case 4
                microActions{i} = holdBall();
%             case 5
%                 microActions{i} = passTheBall(i,j,S);
        end
    end
end

%--------------------------------------------------------------
function [a] = eSoft(argmaxA)

    global numActions epsilon;

    a = argmaxA;    
    numPlayers = numel(argmaxA);
        
    index = find(rand(numPlayers,1) > epsilon);    
    n = numel(index);    
    if n > 0
        randomActionIndex = 1+round((numActions-2).*rand(n,1));
        randomAction = double(randomActionIndex >= argmaxA(index))+randomActionIndex;
        a(index) = randomAction;    
    end
end


%--------------------------------------------------------------
function r = reward(S)
    ball = S{1};
    r = ball{1}(1)+60;
end

%--------------------------------------------------------------
function microAction = goToBall(i,S)
    ball = S{1};
    player = S{i+1};

    ballNextPosition = ball{1}+ball{2};
    ballPlayerVector=ballNextPosition-player{1}(1:2);  
    distanceBall = norm(ballPlayerVector, 2);

    theta = [0 45 90 135 180 225 270]' + player{1}(3);    
    direction = [cosd(theta) sind(theta)];
    [~, index] = max((ballPlayerVector*direction')/distanceBall);    
    
    
    if distanceBall < 1
         microAction = ['turn ' num2str(45*(index-1))];
%         microAction = kickBallGoal(i,S);
%           microAction = passTheBall(ball, player, target);
    else

        if index == 1
            microAction = 'dash 10';
        else
            microAction = ['turn ' num2str(45*(index-1))];
        end
        
    end    
end

%--------------------------------------------------------------
function microAction = kickBallGoal(i,S)
    ball = S{1};
    player = S{i+1};

    ballNextPosition = ball{1}+ball{2};
    ballPlayerVector=ballNextPosition-player{1}(1:2);  
    distanceBall = norm(ballPlayerVector, 2);
    
    if distanceBall < 1
        microAction = ['kick 10 ' num2str(-player{1}(3))];
    else
        microAction = holdBall();
    end    

end

%--------------------------------------------------------------
function microAction = goNearTheBall(i,S)
    ball = S{1};
    player = S{i+1};

    ballNextPosition = ball{1}+ball{2};
    ballPlayerVector=ballNextPosition-player{1}(1:2);  
    distanceBall = norm(ballPlayerVector, 2);
    
    theta = [0 45 90 135 180 225 270]' + player{1}(3);    
    direction = [cosd(theta) sind(theta)];
    [~, index] = max((ballPlayerVector*direction')/distanceBall);
        
    if distanceBall < 8
        microAction = ['turn ' num2str(45*(index-1))];        
    else
        if index == 1
            microAction = 'dash 10';
        else
            microAction = ['turn ' num2str(45*(index-1))];
        end
        
    end    
end

%--------------------------------------------------------------
function microAction = holdBall()    
    microAction = 'dash 0 ';   
end

%--------------------------------------------------------------
function microAction = passTheBall(i,j,S)
    ball = S{1};
    player = S{i+1};
    target = S{j+1};

    ballNextPosition = ball{1}+ball{2};
    ballTargetVector=target{1}(1:2)-ballNextPosition;       
    ballTargetVector = ballTargetVector./norm(ballTargetVector,2);

    playerVector = [cosd(player{1}(3)) sind(player{1}(3))];

    theta = acosd((ballTargetVector*playerVector'));

    if ballTargetVector(2)-playerVector(2) < 0
        microAction = ['kick 10 ' num2str(round(360-theta))]; 
    else
        microAction = ['kick 10 ' num2str(round(theta))]; 
    end        
end

       

function F = get_features_for_player(i, S)
    ball_coords = S{1,1}{1};
    player_coords = S{1,i+1}{1};    
    
    F = zeros(1,3+8+8+5+8+5);
    % Distance to the goal, discretized
    index = discretize(player_coords(1), [-45, 45]);
    F(1+index-1) = 1;
    
    % Heading, discretized
    index = discretize(normalize_angle(deg2rad(player_coords(3))), [pi/4, 2*pi/4, 3*pi/4, 4*pi/4, 5*pi/4, 6*pi/4, 7*pi/4]);
    F(4+index-1) = 1;
    
    % Polar coordinates of the ball with respect to the player
    [theta, rho] = cart2pol(ball_coords(1)-player_coords(1), ball_coords(2)-player_coords(2));
    index = discretize(normalize_angle(theta-deg2rad(player_coords(3))), [pi/4, 2*pi/4, 3*pi/4, 4*pi/4, 5*pi/4, 6*pi/4, 7*pi/4]);
    F(12+index-1) = 1;
    
    index = discretize(rho, [1, 5, 20, 60]);
    F(20+index-1) = 1;
    
    % Polar coordinates of the nearest rival with respect to the
    % player
    rivals = S(1, 7:11);
    [theta, rho] = get_polar_to_closest_rival(player_coords(1), player_coords(2), rivals);
    index = discretize(normalize_angle(theta-deg2rad(player_coords(3))), [pi/4, 2*pi/4, 3*pi/4, 4*pi/4, 5*pi/4, 6*pi/4, 7*pi/4]);
    F(25+index-1) = 1;
    
    index = discretize(rho, [5, 15, 30, 60]);
    F(33+index-1) = 1;
end

%-------------------------------------
function int = discretize(x, intervals)            
    for i = 1:size(intervals, 2)
        if x <= intervals(i)
            int = i;
            return;
        end
    end
    int = i + 1;
end

%-------------------------------------
function [theta, rho] = get_polar_to_closest_rival(x,y, rivals)
    rival_coords = rivals{1}{1};
    [theta, rho] = cart2pol(rival_coords(1)-x, rival_coords(2)-y);    
    
    for i = [1:size(rivals, 2)]
        rival_coords = rivals{i}{1};
        [newtheta, newrho] = cart2pol(rival_coords(1)-x, rival_coords(2)-y);
        if newrho < rho
            rho = newrho;
            theta = newtheta;
        end        
    end
end

%-------------------------------------
function rad = deg2rad(deg)
    rad = deg*pi/180;
end

%-------------------------------------
function angle = normalize_angle(unnor)
    while(unnor > 2*pi)
        unnor = unnor - 2 * pi;
    end
    while(unnor < 0)
        unnor = unnor + 2 * pi;
    end
    
    angle = unnor;
end    
